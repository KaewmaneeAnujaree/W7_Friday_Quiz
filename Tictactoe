class Board():
    def __init__(self):
        self.board = [["1","2","3"],["4","5","6"],["7","8","9"]]
        self.round = 1
    def getter_symbol(self,column):
        return self.board[column]
    def setter_symbol(self,column,row,value):
        self.board[column][row] = value
    def symbol(self):
        if self.round %2 ==0:
            return "o"
        elif self.round %2 ==1:
            return "x"
    def check_win(self):
        if self.board[0][0] =='x' and self.board[1][0] =='x' and self.board[2][0] =='x' or self.board[0][1] =='x' and self.board[1][1] =='x' and self.board[2][1] == 'x' or self.board[0][2] =='x' and self.board[1][2] =='x' and self.board[2][2] == 'x':
            return "X is winner!!"
            self.checkWin = True
        elif self.board[0][0] =='o' and self.board[1][0] =='o' and self.board[2][0] =='o' or self.board[0][1] =='o' and self.board[1][1] =='o' and self.board[2][1] == 'o' or self.board[0][2] =='o' and self.board[1][2] =='o' and self.board[2][2] == 'o':
            return "O is winner!!"
        elif self.board[0][0] =='x' and self.board[0][1] =='x' and self.board[0][2]  =='x' or self.board[1][0] =='x' and self.board[1][1] =='x' and self.board[1][2] == 'x' or self.board[2][0] =='x' and self.board[2][1] =='x' and self.board[2][2] == 'x':
            return "X is winner!!"
        elif self.board[0][0] =='o' and self.board[0][1] =='o' and self.board[0][2] =='o' or self.board[1][0] =='o'and self.board[1][1] =='o'and self.board[1][2] == 'o' or self.board[2][0] =='o'and self.board[2][1] =='y'and self.board[2][2] == 'o':
            return "O is winner!!"
        elif self.board[0][0] =='x'and self.board[1][1] =='x'and self.board[2][2] =='x' or self.board[0][2] =='x'and self.board[1][1] =='x'and self.board[2][0] == 'x':
            print("X is winner!!")
            self.checkWin = True
        elif self.board[0][0] =='o'and self.board[1][1] =='o'and self.board[2][2] =='oâ€™' or self.board[0][2] =='o'and self.board[1][1] =='o'and self.board[2][0] == 'o':
            return "O is winner!!"
        else:
            return " "
    def reset_Board(self):
        self.board = [["1","2","3"],["4","5","6"],["7","8","9"]]
    def start_game(self):
        printer = Printer()
        textinput = TextInput()
        for i in range(3):
            printer.print_board(self.board,len(self.board)-1-i)
        print("------------------------------------------------------")
        while self.round <10 and self.check_win() == " ":
            position = str(textinput.input_sym())
            if position in "1,2,3,4,5,6,7,8,9" and self.getter_symbol((int(position)-1)//3)[(int(position)-1)%3] in "1,2,3,4,5,6,7,8,9":
                self.setter_symbol((int(position)-1)//3,(int(position)-1)%3,self.symbol())
                for i in range(3):
                    printer.print_board(self.board,len(self.board)-1-i)
                print("------------------------------------------------------")
                self.round+=1
                
            else:
                print("Please select another position")
        restart = str(input("Do you want to restart (y/n) : "))
        if restart in "y":
            self.reset_Board()
            self.round = 1
            self.start_game()
    

class Printer():
    def print_board(self,board,column):
        print(board[column])

class TextInput():
    def input_sym(self):
        inputs = input("Select position : ")
        return inputs
    
board = Board()
board.start_game()
